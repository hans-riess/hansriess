# Generated by Django 5.0.7 on 2025-07-10 17:47

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('academic', '0010_auto_20250710_1344'),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('is_profile_owner', models.BooleanField(default=False, help_text='Check if this author is the profile owner')),
                ('affiliation', models.CharField(blank=True, max_length=300, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('website', models.URLField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Reference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=500)),
                ('alphabetical_authors', models.BooleanField(default=False, help_text='Check if authors are listed alphabetically rather than by contribution order')),
                ('year', models.IntegerField()),
                ('reference_type', models.CharField(choices=[('paper', 'Paper'), ('book', 'Book'), ('thesis', 'Thesis'), ('preprint', 'Preprint'), ('journal_article', 'Journal Article'), ('conference_proceedings', 'Conference Proceedings'), ('book_chapter', 'Book Chapter'), ('other', 'Other')], max_length=40)),
                ('journal', models.CharField(blank=True, max_length=200)),
                ('volume', models.CharField(blank=True, max_length=50)),
                ('pages', models.CharField(blank=True, max_length=50)),
                ('doi', models.CharField(blank=True, max_length=100)),
                ('url', models.URLField(blank=True)),
                ('pdf_file', models.FileField(blank=True, upload_to='references/')),
                ('abstract', models.TextField(blank=True)),
                ('keywords', models.CharField(blank=True, max_length=500)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-year', 'title'],
            },
        ),
        migrations.CreateModel(
            name='ReferenceAuthor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(help_text='Order of this author in the author list (1 = first author)')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='academic.author')),
                ('reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='academic.reference')),
            ],
            options={
                'ordering': ['order'],
                'unique_together': {('reference', 'author')},
            },
        ),
        migrations.DeleteModel(
            name='Project',
        ),
        migrations.AddField(
            model_name='profile',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.AddField(
            model_name='profile',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, null=True),
        ),
        migrations.AddField(
            model_name='reference',
            name='authors',
            field=models.ManyToManyField(related_name='references', through='academic.ReferenceAuthor', to='academic.author'),
        ),
    ]
