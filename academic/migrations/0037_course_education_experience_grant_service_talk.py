# Generated by Django 5.0.7 on 2025-08-01 03:11

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('academic', '0036_profile_quote_author'),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_code', models.CharField(help_text='Course code (e.g., CS101, MATH 201)', max_length=20)),
                ('title', models.CharField(help_text='Full course title', max_length=200)),
                ('institution', models.CharField(help_text='Institution where the course was taught', max_length=200)),
                ('department', models.CharField(blank=True, help_text='Department offering the course', max_length=200, null=True)),
                ('semester', models.CharField(choices=[('spring', 'Spring'), ('summer', 'Summer'), ('fall', 'Fall'), ('winter', 'Winter')], max_length=10)),
                ('year', models.IntegerField()),
                ('role', models.CharField(choices=[('instructor', 'Instructor of Record'), ('teaching_assistant', 'Teaching Assistant'), ('guest_lecturer', 'Guest Lecturer'), ('other', 'Other')], default='instructor', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Brief description of the course content')),
                ('syllabus', models.FileField(blank=True, help_text='Course syllabus', null=True, upload_to='courses/syllabi/')),
                ('is_graduate', models.BooleanField(default=False, help_text='Check if this is a graduate-level course')),
                ('is_online', models.BooleanField(default=False, help_text='Check if this was an online course')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Course',
                'verbose_name_plural': 'Courses',
                'ordering': ['-year', '-semester', 'course_code'],
            },
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('degree_type', models.CharField(choices=[('phd', 'Ph.D.'), ('masters', 'M.S.'), ('bachelors', 'B.S.'), ('other', 'Other')], help_text='Type of degree', max_length=20)),
                ('field_of_study', models.CharField(help_text='Field of study or major', max_length=200)),
                ('institution', models.CharField(help_text='University or institution name', max_length=200)),
                ('location', models.CharField(blank=True, help_text='City, State/Province, Country', max_length=200)),
                ('graduation_year', models.PositiveIntegerField(help_text='Year of graduation')),
                ('gpa', models.DecimalField(blank=True, decimal_places=2, help_text='GPA (optional)', max_digits=3, null=True)),
                ('thesis_title', models.CharField(blank=True, help_text='Thesis title (for graduate degrees)', max_length=300)),
                ('advisor', models.CharField(blank=True, help_text='Thesis advisor (for graduate degrees)', max_length=200)),
                ('honors', models.CharField(blank=True, help_text='Honors or distinctions', max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Education',
                'verbose_name_plural': 'Education',
                'ordering': ['-graduation_year', 'degree_type'],
            },
        ),
        migrations.CreateModel(
            name='Experience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Job title or position', max_length=200)),
                ('institution', models.CharField(help_text='Company, university, or organization', max_length=200)),
                ('department', models.CharField(blank=True, help_text='Department or division', max_length=200, null=True)),
                ('location', models.CharField(blank=True, help_text='City, State/Province, Country', max_length=200, null=True)),
                ('job_type', models.CharField(choices=[('academic', 'Academic'), ('industry', 'Industry'), ('government', 'Government'), ('nonprofit', 'Non-Profit'), ('consulting', 'Consulting'), ('other', 'Other')], default='academic', max_length=20)),
                ('academic_position_type', models.CharField(choices=[('academic_faculty', 'Academic Faculty'), ('research_faculty', 'Research Faculty'), ('teaching_faculty', 'Teaching Faculty'), ('lecturer', 'Lecturer'), ('visiting_faculty', 'Visiting Faculty'), ('adjunct_faculty', 'Adjunct Faculty'), ('postdoc', 'Postdoc'), ('research_assistant', 'Research Assistant'), ('teaching_assistant', 'Teaching Assistant'), ('internship', 'Internship'), ('REU', 'REU'), ('other', 'Other')], default='other', max_length=20)),
                ('full_time', models.BooleanField(default=True, help_text='Check if this is a full-time position')),
                ('tenure_track', models.BooleanField(default=False, help_text='Check if this is a tenure-track position')),
                ('start_date', models.DateField(help_text='Start date of the position')),
                ('end_date', models.DateField(blank=True, help_text='End date (leave blank if current)', null=True)),
                ('is_current', models.BooleanField(default=False, help_text='Check if this is your current position')),
                ('supervisor', models.CharField(blank=True, help_text='Direct supervisor or manager', max_length=200, null=True)),
                ('description', models.TextField(blank=True, help_text='Brief description of responsibilities and achievements')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Experience',
                'verbose_name_plural': 'Experiences',
                'ordering': ['-start_date', 'title'],
            },
        ),
        migrations.CreateModel(
            name='Grant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the grant or award', max_length=300)),
                ('funding_agency', models.CharField(help_text='Funding agency or organization', max_length=200)),
                ('role', models.CharField(choices=[('pi', 'Principal Investigator'), ('co_pi', 'Co-Principal Investigator'), ('senior_personnel', 'Senior Personnel'), ('key_personnel', 'Key Personnel'), ('unnamed_personnel', 'Unnamed Personnel'), ('other', 'Other')], default='pi', max_length=20)),
                ('amount', models.DecimalField(blank=True, decimal_places=2, help_text='Total grant amount', max_digits=12, null=True)),
                ('currency', models.CharField(default='USD', help_text='Currency code (USD, EUR, etc.)', max_length=3)),
                ('start_year', models.PositiveIntegerField(help_text='Start year of the grant')),
                ('end_year', models.PositiveIntegerField(blank=True, help_text='End year of the grant (if applicable)', null=True)),
                ('co_pis', models.CharField(blank=True, help_text='Co-PIs (optional, comma-separated)', max_length=300)),
                ('grant_number', models.CharField(blank=True, help_text='Grant/award number (optional)', max_length=100, null=True)),
            ],
            options={
                'verbose_name': 'Grant',
                'verbose_name_plural': 'Grants',
                'ordering': ['-start_year', 'title'],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title or description of the service', max_length=200)),
                ('role', models.CharField(choices=[('chair', 'Chair'), ('co_chair', 'Co-Chair'), ('organizer', 'Organizer'), ('reviewer', 'Reviewer'), ('member', 'Member'), ('volunteer', 'Volunteer'), ('other', 'Other')], default='member', max_length=20)),
                ('organization', models.CharField(help_text='Organization, conference, journal, or institution', max_length=200)),
                ('service_type', models.CharField(choices=[('conference', 'Conference'), ('journal', 'Journal'), ('seminar', 'Seminar'), ('committee', 'Committee'), ('volunteer', 'Volunteer'), ('other', 'Other')], default='other', max_length=20)),
                ('year', models.PositiveIntegerField(help_text='Year of service')),
                ('location', models.CharField(blank=True, help_text='Location if relevant', max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Service',
                'verbose_name_plural': 'Service',
                'ordering': ['-year', 'title'],
            },
        ),
        migrations.CreateModel(
            name='Talk',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the talk or presentation', max_length=300)),
                ('abstract', models.TextField(blank=True, help_text='Abstract or description of the talk')),
                ('venue', models.CharField(help_text='Conference, institution, or event name', max_length=200)),
                ('location', models.CharField(blank=True, help_text='City, State/Province, Country', max_length=200, null=True)),
                ('talk_type', models.CharField(choices=[('conference', 'Conference Presentation'), ('seminar', 'Seminar'), ('workshop', 'Workshop'), ('tutorial', 'Tutorial'), ('keynote', 'Keynote'), ('poster', 'Poster Presentation'), ('panel', 'Panel Discussion'), ('colloquium', 'Colloquium'), ('guest_lecture', 'Guest Lecture'), ('webinar', 'Webinar'), ('podcast', 'Podcast'), ('interview', 'Interview'), ('other', 'Other')], default='other', max_length=20)),
                ('is_invited', models.BooleanField(default=False, help_text='Check if this is an invited talk')),
                ('date', models.DateField(help_text='Date of the talk')),
                ('slides', models.FileField(blank=True, help_text='Upload slides file', null=True, upload_to='talks/slides/')),
                ('event_url', models.URLField(blank=True, help_text='URL to the event website', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('related_publications', models.ManyToManyField(blank=True, help_text='Related publications or papers', to='academic.reference')),
            ],
            options={
                'verbose_name': 'Talk',
                'verbose_name_plural': 'Talks',
                'ordering': ['-date', 'title'],
            },
        ),
    ]
